name: CI and Deploy Coverage

on:
  push:
    branches: ["main"]
  pull_request:
    branches: ["main"]

permissions:
  contents: write    # Required for checkout and committing changes
  pages: write      # Required for GitHub Pages deployment
  security-events: write  # Required for CodeQL analysis
  actions: read     # Required for running actions
  checks: read      # Required for checking workflow status

env:
  PYTHON_VERSION: '3.x'
  COVERAGE_REPORT_DIR: htmlcov

jobs:
  code-scan:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Initialize CodeQL
        uses: github/codeql-action/init@v2
        with:
          languages: python

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: ${{ env.PYTHON_VERSION }}

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt

      - name: Run tests with coverage
        run: pytest --cov=src --cov-report=html --cov-report=xml

      - name: Perform CodeQL Analysis
        uses: github/codeql-action/analyze@v2

      - name: Upload coverage report artifact
        uses: actions/upload-artifact@v3
        with:
          name: coverage-report
          path: |
            coverage.xml
            ${{ env.COVERAGE_REPORT_DIR }}

  deploy-coverage:
    needs: code-scan  # Wait for code scan to complete
    if: github.ref == 'refs/heads/main' && github.event_name == 'push'
    runs-on: ubuntu-latest
    environment: production
    timeout-minutes: 10
    
    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0
          # Use your existing token with higher privileges to bypass branch protection
          token: ${{ secrets.actions }}

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: ${{ env.PYTHON_VERSION }}

      - name: Cache Python dependencies
        uses: actions/cache@v3
        with:
          path: ~/.cache/pip
          key: ${{ runner.os }}-pip-${{ hashFiles('**/requirements.txt') }}
          restore-keys: |
            ${{ runner.os }}-pip-

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt

      - name: Download coverage report artifact
        uses: actions/download-artifact@v3
        with:
          name: coverage-report

      - name: Update Coverage Badge in README
        run: |
          echo "Updating coverage badge..."
          COVERAGE=$(python -m src.coverage_utils.get_coverage --coverage-xml coverage.xml --readme README.md)
          EXIT_CODE=$?
          if [ $EXIT_CODE -ne 0 ]; then
            echo "Error updating coverage badge (exit code: $EXIT_CODE)"
            exit 1
          fi
          echo "Coverage: $COVERAGE%"
          
          git config --global user.name "GitHub Actions"
          git config --global user.email "actions@github.com"
          
          # Check if there are actual changes to commit
          if git diff --quiet README.md; then
            echo "No changes to README.md, skipping commit"
          else
            git add README.md
            git commit -m "Update coverage badge to ${COVERAGE}%"
            # Push directly to main branch with your token that bypasses branch protection
            git push origin HEAD:main || {
              echo "Failed to push to main branch"
              exit 1
            }
          fi

      - name: Deploy Coverage Report to GitHub Pages
        run: |
          # Create a fresh gh-pages branch
          git checkout --orphan gh-pages
          # Remove all files except the coverage report
          find . -maxdepth 1 -not -name "${COVERAGE_REPORT_DIR}" -not -name '.git' -not -name '.gitignore' -exec rm -rf {} \;
          # Copy coverage report to root
          cp -r ${COVERAGE_REPORT_DIR}/* .
          # Add .nojekyll file to disable Jekyll processing
          touch .nojekyll
          # Configure git
          git config --global user.name "GitHub Actions"
          git config --global user.email "actions@github.com"
          # Commit and push
          git add -A
          git commit -m "Deploy coverage report for commit ${GITHUB_SHA}"
          git push --force origin gh-pages
