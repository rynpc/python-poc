name: "Security Analysis"

on:
  push:
    branches: [ "main" ]
  pull_request:
    branches: [ "main" ]
  schedule:
    - cron: '30 1 * * 0'  # Run weekly on Sundays at 1:30 AM

env:
  PYTHON_VERSION: '3.x'

jobs:
  analyze:
    name: CodeQL Analysis
    runs-on: ubuntu-latest
    timeout-minutes: 30
    permissions:
      actions: read
      contents: read
      security-events: write
    outputs:
      vuln_status: ${{ steps.vuln-comparison.outputs.status }}

    steps:
    - name: Checkout repository
      uses: actions/checkout@v4
      with:
        fetch-depth: 0  # Fetch all history for better analysis

    - name: Get previous vulnerabilities count
      id: prev-vulns
      run: |
        PREV_ALERTS=$(gh api graphql -f query='
          query {
            repository(owner:"${{ github.repository_owner }}", name:"${{ github.event.repository.name }}") {
              vulnerabilityAlerts(first:100, states: OPEN) {
                nodes {
                  severity
                }
              }
            }
          }
        ')
        echo "count=$(echo "$PREV_ALERTS" | jq '.data.repository.vulnerabilityAlerts.nodes | length')" >> "$GITHUB_OUTPUT"
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

    - name: Initialize CodeQL
      uses: github/codeql-action/init@v3
      with:
        languages: python
        queries: security-and-quality

    - name: Setup Python
      uses: actions/setup-python@v4
      with:
        python-version: ${{ env.PYTHON_VERSION }}

    - name: Cache Python dependencies
      uses: actions/cache@v3
      with:
        path: ~/.cache/pip
        key: ${{ runner.os }}-pip-${{ hashFiles('**/requirements.txt') }}
        restore-keys: |
          ${{ runner.os }}-pip-

    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt

    - name: Perform CodeQL Analysis
      uses: github/codeql-action/analyze@v3
      with:
        category: "/language:python"

    - name: Compare vulnerability counts
      id: vuln-comparison
      run: |
        NEW_ALERTS=$(gh api graphql -f query='
          query {
            repository(owner:"${{ github.repository_owner }}", name:"${{ github.event.repository.name }}") {
              vulnerabilityAlerts(first:100, states: OPEN) {
                nodes {
                  severity
                }
              }
            }
          }
        ')
        NEW_COUNT=$(echo "$NEW_ALERTS" | jq '.data.repository.vulnerabilityAlerts.nodes | length')
        PREV_COUNT=${{ steps.prev-vulns.outputs.count }}
        
        if [ "$NEW_COUNT" -gt "$PREV_COUNT" ]; then
          echo "New vulnerabilities detected! Previous: $PREV_COUNT, Current: $NEW_COUNT"
          echo "status=failed" >> "$GITHUB_OUTPUT"
          exit 1
        else
          echo "No new vulnerabilities detected"
          echo "status=success" >> "$GITHUB_OUTPUT"
        fi
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}