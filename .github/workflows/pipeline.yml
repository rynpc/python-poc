name: "CI/CD Pipeline"

on:
  push:
    branches: [ "main" ]
  pull_request:
    branches: [ "main" ]
  schedule:
    - cron: '30 1 * * 0'  # Weekly security scan

permissions:
  actions: read
  contents: write
  security-events: write
  pages: write
  checks: write

env:
  PYTHON_VERSION: '3.x'
  COVERAGE_REPORT_DIR: htmlcov
  MIN_COVERAGE: 35

jobs:
  setup:
    runs-on: ubuntu-latest
    outputs:
      cache-key: ${{ steps.cache-key.outputs.value }}
    timeout-minutes: 10
    steps:
      - uses: actions/checkout@v4
      - name: Setup Python
        uses: actions/setup-python@v4
        with:
          python-version: ${{ env.PYTHON_VERSION }}
          cache: 'pip'
      - id: cache-key
        run: echo "value=${{ runner.os }}-pip-${{ hashFiles('**/requirements.txt') }}" >> "$GITHUB_OUTPUT"
      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt

  code-quality:
    needs: setup
    if: success()
    runs-on: ubuntu-latest
    timeout-minutes: 10
    steps:
      - uses: actions/checkout@v4
      - name: Setup Python
        uses: actions/setup-python@v4
        with:
          python-version: ${{ env.PYTHON_VERSION }}
          cache: 'pip'
          cache-dependency-path: requirements.txt
      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt
      - name: Check formatting with Black
        run: black --check src tests
      - name: Check import ordering
        run: isort --check-only --diff src tests
      - name: Run Flake8
        run: flake8 src tests
      - name: Run Pylint
        run: pylint src tests
      - name: Run MyPy type checking
        run: mypy src tests
      - name: Run Bandit security checks
        run: bandit -r src -x tests
      - name: Check documentation coverage
        run: pydocstyle src

  test:
    needs: [code-quality]
    if: success()
    runs-on: ubuntu-latest
    strategy:
      matrix:
        python-version: ['3.10', '3.11', '3.12']
    timeout-minutes: 20
    steps:
      - uses: actions/checkout@v4
      - name: Setup Python
        uses: actions/setup-python@v4
        with:
          python-version: ${{ matrix.python-version }}
          cache: 'pip'
          cache-dependency-path: requirements.txt
      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt
          pip install coverage
      - name: Run tests with coverage
        id: get-coverage
        run: |
          coverage run -m pytest src
          coverage report --fail-under=$MIN_COVERAGE
          coverage html
          coverage xml
          coverage json
      - name: Upload coverage reports
        uses: actions/upload-artifact@v4
        with:
          name: coverage-reports-${{ matrix.python-version }}-${{ github.run_id }}
          path: |
            htmlcov/
            coverage.xml
            coverage.json

  badge-update:
    if: github.event_name == 'push' && startsWith(github.ref, 'refs/heads/main') && (github.actor != 'github-actions[bot]' || !contains(github.event.head_commit.message, 'Update coverage badge'))
    runs-on: ubuntu-latest
    needs: test
    concurrency:
      group: production
      cancel-in-progress: false
    steps:
      - name: Checkout repo
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
      - name: Setup Python
        uses: actions/setup-python@v4
        with:
          python-version: ${{ env.PYTHON_VERSION }}
          cache: 'pip'
      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install coverage pytest
      - name: Generate coverage report (again for badge)
        run: |
          coverage run -m pytest src
          coverage report --fail-under=$MIN_COVERAGE
          coverage xml
          coverage json
      - name: Generate coverage badge
        uses: tj-actions/coverage-badge-py@v2
        with:
          output: coverage.svg
          json_path: coverage.json
      - name: Update README.md with new badge
        run: |
          # Replace the coverage badge in README.md (if exists), else add it
          BADGE_LINE="![coverage](./coverage.svg)"
          if grep -q '!\[coverage\]' README.md; then
            # Replace the line
            sed -i '/!\[coverage\]/c\'"$BADGE_LINE" README.md
          else
            # Insert at the top
            sed -i '1s;^;'"$BADGE_LINE\n"';' README.md
          fi
      - name: Commit and push coverage badge & README update
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          git config --global user.name "github-actions[bot]"
          git config --global user.email "actions@github.com"
          git add coverage.svg README.md
          git commit -m "Update coverage badge [skip ci]" || echo "Nothing to commit"
          git push
